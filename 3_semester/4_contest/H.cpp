

// Привидение Петя любит играть со своими кубиками. Он любит выкладывать их в ряд и разглядывать свое творение. Однако недавно друзья решили подшутить над Петей и поставили в его игровой комнате зеркало. Ведь всем известно, что привидения не отражаются в зеркале! А кубики отражаются. Теперь Петя видит перед собой N цветных кубиков, но не знает, какие из этих кубиков настоящие, а какие — всего лишь отражение в зеркале. Помогите Пете! Выясните, сколько кубиков может быть у Пети. Петя видит отражение всех кубиков в зеркале и часть кубиков, которая находится перед ним. Часть кубиков может быть позади Пети, их он не видит.

// Формат ввода
// Первая строка входного файла содержит число N (1 ≤ N ≤ 10^5) и количество различных цветов, в которые могут быть раскрашены кубики — M (1 ≤ M ≤ 10^5). Следующая строка содержит N целых чисел от 1 до M — цвета кубиков.
// Формат вывода
// Выведите в выходной файл все такие K в порядке возрастания, что у Пети может быть K кубиков. 


#include <iostream>
#include <vector>

std::vector<int> ZFunc(std::vector<int>& str) {
    std::vector<int> z(str.size(), 0);
    int left = 0;
    int right = 0;
    int len = str.size();
    z[0] = len;
    for (int i = 1; i < len; ++i) {
        z[i] = std::max(0, std::min(right - i, z[i - left]));
        while (i + z[i] < len && str[z[i]] == str[i + z[i]]) {
            ++z[i];
        }
        if (right < i + z[i]) {
            left = i;
            right = i + z[i];
        }
    }
    return z;
}

int main() {
    int n = 0;
    int m = 0;
    std::cin >> n >> m;
    std::vector<int> str(2 * n);
    for (int i = 0; i < n; ++i) {
        std::cin >> str[i];
        str[2 * n - i - 1] = str[i];
    }
    std::vector<int> z_func = ZFunc(str);
    for (int i = n; i < 2 * n; ++i) {
        if (z_func[i] % 2 == 0 && z_func[i] + i == 2 * n) {
            std::cout << n - z_func[i] / 2 << " ";
        }
    }
    std::cout << n;
    return 0;
}
