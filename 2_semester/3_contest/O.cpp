// У банка есть клиенты. Каждый клиент имеет ровно один счет.
// Напишите программу, которая будет выполнять последовательность запросов таких двух видов:
//     Начинается с числа 1, затем через пробел следует имя клиента (слово из латинских букв), далее через пробел идет сумма денег, которую клиент кладет или берет из счета в банке (целое число, не превышает по модулю 10000).
//     Начинается с числа 2, через пробел следует имя клиента. На каждый такой запрос программа должна ответить какая сумма в данный момент есть на счету заданного клиента. Если такое имя клиента пока ни разу не упоминалось в запросах вида 1, выводите вместо числа слово «ERROR».
// В начале работы программы у всех клиентов на счету 0. Затем суммы могут становиться как положительными, так и отрицательными.
// Обратите внимание, что в ситуации, когда клиент снял суммарно ровно столько же денег, сколько положил, сумма на счете становится равной 0, но, раз его имя уже встречалось, нулевое значение не является основанием выводить «ERROR».
// Для решения задачи используйте ассоциативный контейнер.

// Формат ввода
// Первая строка стандартного входного потока количество запросов N (1 ≤ N ≤ 10^5). Далее следуют N строк в каждой из которых описан один из двух описанных выше видов запроса.
// Формат вывода
// На каждый запрос 2-го вида нужно вывести текущее значение на счету заданного клиента (или слово «ERROR»).


#include <iostream>
#include <algorithm>
#include <string>
#include <map>

int main () {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);
    std::map<std::string, int> clients;
    int num;
    std::cin >> num;
    for (size_t i = 0; i < num ; ++i) {
        int category;
        std::cin >> category;
        if (category == 1)  {
            std::string name;
            int account;
            std::cin >> name >> account;
            auto client = clients.find(name);
            if (client != clients.end()) {
                client->second += account;
            } else {
                clients.emplace(std::make_pair(name, account));
            }
        } else {
            std::string name;
            std::cin >> name;
            auto client = clients.find(name);
            if (client != clients.end()) {
                std::cout << client->second << "\n";
            } else {
                std::cout << "ERROR\n";
            }
        }
    }
    return 0;
}
